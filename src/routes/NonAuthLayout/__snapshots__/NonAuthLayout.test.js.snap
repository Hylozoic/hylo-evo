// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NonAuthLayout renders correctly 1`] = `
<Div100vh
  data-stylename="nonAuthContainer"
>
  <div
    data-stylename="background"
  >
    <div
      data-stylename="particlesBackgroundWrapper"
    >
      <t
        height="100%"
        params={
          Object {
            "interactivity": Object {
              "detect_on": "canvas",
              "events": Object {
                "onclick": Object {
                  "enable": false,
                  "mode": "push",
                },
                "onhover": Object {
                  "enable": false,
                  "mode": "repulse",
                },
                "resize": true,
              },
              "modes": Object {
                "bubble": Object {
                  "distance": 400,
                  "duration": 2,
                  "opacity": 8,
                  "size": 40,
                  "speed": 3,
                },
                "grab": Object {
                  "distance": 400,
                  "line_linked": Object {
                    "opacity": 1,
                  },
                },
                "push": Object {
                  "particles_nb": 4,
                },
                "remove": Object {
                  "particles_nb": 2,
                },
                "repulse": Object {
                  "distance": 200,
                  "duration": 0.4,
                },
              },
            },
            "particles": Object {
              "color": Object {
                "value": "#0dc39f",
              },
              "line_linked": Object {
                "color": "#0dc39f",
                "distance": 150,
                "enable": true,
                "opacity": 0.4,
                "width": 1,
              },
              "move": Object {
                "attract": Object {
                  "enable": true,
                  "rotateX": 600,
                  "rotateY": 1200,
                },
                "bounce": false,
                "direction": "none",
                "enable": true,
                "out_mode": "out",
                "random": true,
                "speed": 1,
                "straight": false,
              },
              "number": Object {
                "density": Object {
                  "enable": true,
                  "value_area": 800,
                },
                "value": 32,
              },
              "opacity": Object {
                "anim": Object {
                  "enable": false,
                  "opacity_min": 0.1,
                  "speed": 1,
                  "sync": false,
                },
                "random": true,
                "value": 0.5,
              },
              "shape": Object {
                "image": Object {
                  "height": 100,
                  "src": "img/github.svg",
                  "width": 100,
                },
                "polygon": Object {
                  "nb_sides": 5,
                },
                "stroke": Object {
                  "color": "#000000",
                  "width": 0,
                },
                "type": "circle",
              },
              "size": Object {
                "anim": Object {
                  "enable": false,
                  "size_min": 0.1,
                  "speed": 40,
                  "sync": false,
                },
                "random": true,
                "value": 4.008530152163807,
              },
            },
            "retina_detect": true,
          }
        }
        style={
          Object {
            "height": "100%",
            "left": 0,
            "position": "fixed",
            "top": 0,
            "width": "100%",
          }
        }
        width="100%"
      />
    </div>
    <div
      data-stylename="topRow"
    >
      <a
        href="/"
      >
        <img
          alt="Hylo logo"
          data-stylename="logo"
          src="/assets/hylo.svg"
        />
      </a>
    </div>
    <Route
      component={[Function]}
      path="/login"
    />
    <Switch>
      <Route
        component={[Function]}
        exact={true}
        path="/signup"
      />
      <Route
        component={[Function]}
        exact={true}
        path="/signup/verify-email"
      />
      <Route
        component={[Function]}
        exact={true}
        path="/signup/finish"
      />
    </Switch>
    <Route
      component={[Function]}
      path="/reset-password"
    />
    <Switch>
      <Redirect
        exact={true}
        from="/public/:detail(post)?/:postId(\\\\d+)?/:action(new|edit)?"
        key="streamToMap"
        to="/public/map"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "displayName": "Connect(MapExplorer)",
            "type": [Function],
          }
        }
        exact={true}
        path="/:context(public)/:view(map)/:detail(post)?/:postId(\\\\d+)?/:action(new|edit)?"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "displayName": "Connect(MapExplorer)",
            "type": [Function],
          }
        }
        exact={true}
        path="/:context(public)/:view(map)/:detail(group)?/(:detailGroupSlug)?"
      />
      <Route
        component={[Function]}
        exact={true}
        path="/:context(public)/:topicName"
      />
    </Switch>
    <div
      data-stylename="detail hidden"
      id="detail-column"
    >
      <Switch>
        <Route
          component={
            Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "displayName": "Connect(PostDetail)",
              "type": [Function],
            }
          }
          key="/:context(|public)/:detail(post)/:postId(\\\\d+)/:action(edit)?"
          path="/:context(|public)/:detail(post)/:postId(\\\\d+)/:action(edit)?"
        />
        <Route
          component={
            Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "displayName": "Connect(PostDetail)",
              "type": [Function],
            }
          }
          key="/:context(|public)/:view(map)/:detail(post)/:postId(\\\\d+)/:action(edit)?"
          path="/:context(|public)/:view(map)/:detail(post)/:postId(\\\\d+)/:action(edit)?"
        />
        <Route
          component={
            Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "displayName": "Connect(GroupDetail)",
              "type": [Function],
            }
          }
          key="/:context(|public)/:view(map)/:detail(group)/:detailGroupSlug"
          path="/:context(|public)/:view(map)/:detail(group)/:detailGroupSlug"
        />
      </Switch>
    </div>
    <div
      data-stylename="below-container"
    >
      <Route
        component={[Function]}
        path="/signup"
      />
      <Route
        component={[Function]}
        path="/login"
      />
      <Route
        component={[Function]}
        path="/reset-password"
      />
    </div>
  </div>
  <a
    ButtonComponent={[Function]}
    ariaAcceptLabel="Accept cookies"
    ariaDeclineLabel="Decline cookies"
    buttonClasses=""
    buttonId="rcc-confirm-button"
    buttonStyle={
      Object {
        "backgroundColor": "rgba(37, 196, 159, 1.00)",
        "borderRadius": "5px",
        "color": "rgba(255, 255, 255, 1.00)",
        "fontSize": "13px",
      }
    }
    buttonText="I understand"
    buttonWrapperClasses=""
    containerClasses="CookieConsent"
    contentClasses=""
    cookieName="hyloCookieConsent"
    cookieValue={true}
    debug={false}
    declineButtonClasses=""
    declineButtonId="rcc-decline-button"
    declineButtonText="I decline"
    declineCookieValue={false}
    disableButtonStyles={false}
    disableStyles={false}
    enableDeclineButton={false}
    expires={150}
    extraCookieOptions={Object {}}
    flipButtons={false}
    hideOnAccept={true}
    hideOnDecline={true}
    location="bottom"
    onAccept={[Function]}
    onDecline={[Function]}
    overlay={false}
    overlayClasses=""
    sameSite="lax"
    setDeclineCookie={true}
    style={
      Object {
        "background": "rgba(41, 64, 90, .8)",
      }
    }
  >
    Hylo uses cookies to enhance the user experience. 
    <button
      data-stylename="viewDetails"
      onClick={[Function]}
    >
      View details
    </button>
    <div
      data-stylename="cookieInformation"
    >
      <div
        data-stylename="content"
      >
        <div
          data-stylename="pad"
        >
          <h3>
            How do we use cookies?
          </h3>
          <h4>
            Hylo login & session
          </h4>
          <p>
            We use cookies to help understand whether you are logged in and to understand your preferences and where you are in Hylo.
          </p>
          <h4>
            Mixpanel
          </h4>
          <p>
            We use a service called Mixpanel to understand how people like you use Hylo. Your identity is anonymized but your behavior is recorded so that we can make improvements to Hylo based on how people are using it.
          </p>
          <h4>
            Optimizely
          </h4>
          <p>
            Optimizely helps us to test improvements to Hylo by showing different users different sets of features. Optimizely tracks who has seen what and how successful the feature is in accomplishing it's goal
          </p>
          <h4>
            Intercom
          </h4>
          <p>
            When people on Hylo need help or want to report a bug, they are interacting with a service called intercom. Intercom stores cookies in your browser to keep track of conversations with us, the development team.
          </p>
          <h4>
            Local storage & cache
          </h4>
          <p>
            We store images, icons and application data in your browser to improve performance and load times.
          </p>
          <button
            data-stylename="closeButton"
            onClick={[Function]}
          >
            Close
          </button>
        </div>
      </div>
      <div
        data-stylename="bg"
        onClick={[Function]}
      />
    </div>
  </a>
</Div100vh>
`;
