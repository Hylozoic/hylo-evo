// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AttachmentManager as used with CommentForm (default case) when empty 1`] = `""`;

exports[`AttachmentManager as used with CommentForm (default case) when loading 1`] = `<Fragment />`;

exports[`AttachmentManager as used with CommentForm (default case) when loading, with attachments 1`] = `
<Fragment>
  <ImageManager
    addAttachment={[Function]}
    attachments={
      Array [
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/foo.png",
        },
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/bar.jpg",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    switchAttachments={[Function]}
    type="comment"
    uploadAttachmentPending={true}
  />
  <FileManager
    addAttachment={[Function]}
    attachments={
      Array [
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing1.pdf",
        },
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing2.xls",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    switchAttachments={[Function]}
    type="comment"
    uploadAttachmentPending={true}
  />
</Fragment>
`;

exports[`AttachmentManager as used with CommentForm (default case) with attachments 1`] = `
<Fragment>
  <ImageManager
    addAttachment={[Function]}
    attachments={
      Array [
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/foo.png",
        },
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/bar.jpg",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    switchAttachments={[Function]}
    type="comment"
  />
  <FileManager
    addAttachment={[Function]}
    attachments={
      Array [
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing1.pdf",
        },
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing2.xls",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    switchAttachments={[Function]}
    type="comment"
  />
</Fragment>
`;

exports[`AttachmentManager as used with PostEditor (showLabel, showLoading, showAddButtons) when empty 1`] = `""`;

exports[`AttachmentManager as used with PostEditor (showLabel, showLoading, showAddButtons) when loading 1`] = `
<Fragment>
  <ImageManager
    addAttachment={[Function]}
    attachments={Array []}
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    showLabel={true}
    showLoading={true}
    showsAddButton={true}
    switchAttachments={[Function]}
    type="post"
    uploadAttachmentPending={true}
  />
  <FileManager
    addAttachment={[Function]}
    attachments={Array []}
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    showLabel={true}
    showLoading={true}
    showsAddButton={true}
    switchAttachments={[Function]}
    type="post"
    uploadAttachmentPending={true}
  />
</Fragment>
`;

exports[`AttachmentManager as used with PostEditor (showLabel, showLoading, showAddButtons) when loading, with attachments 1`] = `
<Fragment>
  <ImageManager
    addAttachment={[Function]}
    attachments={
      Array [
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/foo.png",
        },
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/bar.jpg",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    showLabel={true}
    showLoading={true}
    showsAddButton={true}
    switchAttachments={[Function]}
    type="post"
    uploadAttachmentPending={true}
  />
  <FileManager
    addAttachment={[Function]}
    attachments={
      Array [
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing1.pdf",
        },
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing2.xls",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    showLabel={true}
    showLoading={true}
    showsAddButton={true}
    switchAttachments={[Function]}
    type="post"
    uploadAttachmentPending={true}
  />
</Fragment>
`;

exports[`AttachmentManager as used with PostEditor (showLabel, showLoading, showAddButtons) with attachments 1`] = `
<Fragment>
  <ImageManager
    addAttachment={[Function]}
    attachments={
      Array [
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/foo.png",
        },
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/bar.jpg",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    showLabel={true}
    showLoading={true}
    showsAddButton={true}
    switchAttachments={[Function]}
    type="post"
  />
  <FileManager
    addAttachment={[Function]}
    attachments={
      Array [
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing1.pdf",
        },
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing2.xls",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    showLabel={true}
    showLoading={true}
    showsAddButton={true}
    switchAttachments={[Function]}
    type="post"
  />
</Fragment>
`;

exports[`AttachmentManager when attachmentType "file" with attachments (of both types), when loading 1`] = `
<Fragment>
  <FileManager
    addAttachment={[Function]}
    attachmentType="file"
    attachments={
      Array [
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing1.pdf",
        },
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing2.xls",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    switchAttachments={[Function]}
    type="anything"
    uploadAttachmentPending={true}
  />
</Fragment>
`;

exports[`AttachmentManager when attachmentType "image" with attachments (of both types), when loading 1`] = `
<Fragment>
  <ImageManager
    addAttachment={[Function]}
    attachmentType="image"
    attachments={
      Array [
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/foo.png",
        },
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/bar.jpg",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    switchAttachments={[Function]}
    type="anything"
    uploadAttachmentPending={true}
  />
</Fragment>
`;

exports[`AttachmentManager when attachmentType not provided with attachments (of both types), when loading 1`] = `
<Fragment>
  <ImageManager
    addAttachment={[Function]}
    attachments={
      Array [
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/foo.png",
        },
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/bar.jpg",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    switchAttachments={[Function]}
    type="anything"
    uploadAttachmentPending={true}
  />
  <FileManager
    addAttachment={[Function]}
    attachments={
      Array [
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing1.pdf",
        },
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing2.xls",
        },
      ]
    }
    clearAttachments={[Function]}
    id="new"
    loadAttachments={[Function]}
    removeAttachment={[Function]}
    setAttachments={[Function]}
    switchAttachments={[Function]}
    type="anything"
    uploadAttachmentPending={true}
  />
</Fragment>
`;

exports[`FileManager matches last snapshot 1`] = `
<div
  data-stylename="file-manager"
>
  <div
    data-stylename="section-label"
  >
    AttachmentManager.files
  </div>
  <div
    data-stylename="file-previews"
  >
    <FilePreview
      attachment={
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing1.pdf",
        }
      }
      key="0"
      removeFile={[Function]}
    />
    <FilePreview
      attachment={
        Object {
          "attachmentType": "file",
          "url": "https://nowhere/thing2.xls",
        }
      }
      key="1"
      removeFile={[Function]}
    />
    <div
      data-stylename="loading-file"
    >
      AttachmentManager.loadingFile
    </div>
    <Connect(UploadAttachmentButton)
      attachmentType="file"
      data-stylename="add-file-row"
      id={1}
      onSuccess={[Function]}
      type="post"
    >
      <div
        data-stylename="add-file"
      >
        <span
          data-stylename="add-file-plus"
        >
          +
        </span>
         
        AttachmentManager.addFile
      </div>
    </Connect(UploadAttachmentButton)>
  </div>
</div>
`;

exports[`FilePreview matches last snapshot 1`] = `
<div
  data-stylename="file-preview"
>
  <Icon
    data-stylename="icon-document"
    name="Document"
  />
  <div
    data-stylename="file-name"
  >
    foo.pdf
  </div>
  <div
    data-stylename="file-size"
  >
    23.3mb
  </div>
  <Icon
    data-stylename="remove-file"
    name="Ex"
    onClick={[Function]}
  />
</div>
`;

exports[`ImageManager matches last snapshot 1`] = `
<div
  data-stylename="image-manager"
>
  <div
    data-stylename="section-label"
  >
    AttachmentManager.imagesTitle
  </div>
  <div
    data-stylename="image-previews"
  >
    <ImagePreview
      attachment={
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/foo.png",
        }
      }
      index={0}
      key="0"
      removeImage={[Function]}
    />
    <ImagePreview
      attachment={
        Object {
          "attachmentType": "image",
          "url": "https://nowhere/bar.jpg",
        }
      }
      index={1}
      key="1"
      removeImage={[Function]}
    />
    <div
      data-stylename="add-image"
    >
      <Loading />
    </div>
    <Connect(UploadAttachmentButton)
      attachmentType="image"
      id={1}
      onSuccess={[Function]}
      type="post"
    >
      <div
        data-stylename="add-image"
      >
        +
      </div>
    </Connect(UploadAttachmentButton)>
  </div>
</div>
`;

exports[`ImagePreview matches last snapshot 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <div
    id="root"
  >
    <div
      data-stylename="image-preview"
      draggable="true"
      style="opacity: 1;"
    >
      <div
        data-stylename="image"
        style="background-image: url(https://nowhere/foo.zng);"
      >
        <span
          class="icon-Ex"
          data-stylename="icon"
        />
      </div>
    </div>
  </div>,
  "container": <div
    id="root"
  >
    <div
      data-stylename="image-preview"
      draggable="true"
      style="opacity: 1;"
    >
      <div
        data-stylename="image"
        style="background-image: url(https://nowhere/foo.zng);"
      >
        <span
          class="icon-Ex"
          data-stylename="icon"
        />
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
