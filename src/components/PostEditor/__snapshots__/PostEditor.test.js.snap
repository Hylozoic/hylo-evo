// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ActionsBar matches last snapshot 1`] = `
<div
  data-stylename="actionsBar"
>
  <div
    data-stylename="actions"
  >
    <Connect(UploadAttachmentButton)
      allowMultiple={true}
      attachmentType="image"
      id={1}
      onSuccess={[Function]}
      type="post"
    >
      <Icon
        data-stylename="action-icon"
        name="AddImage"
      />
    </Connect(UploadAttachmentButton)>
    <Connect(UploadAttachmentButton)
      allowMultiple={true}
      attachmentType="file"
      id={1}
      onSuccess={[Function]}
      type="post"
    >
      <Icon
        data-stylename="action-icon"
        name="Paperclip"
      />
    </Connect(UploadAttachmentButton)>
  </div>
  <Button
    color="green"
    data-stylename="postButton"
    dataFor="submit-tt"
    dataTip=""
    disabled={false}
    label="Save"
    onClick={[Function]}
  />
  <Tooltip
    delay={150}
    id="submit-tt"
    offset={
      Object {
        "top": 0,
      }
    }
    position="bottom"
  />
</div>
`;

exports[`ActionsBar matches last snapshot while loading 1`] = `
<div
  data-stylename="actionsBar"
>
  <div
    data-stylename="actions"
  >
    <Connect(UploadAttachmentButton)
      allowMultiple={true}
      attachmentType="image"
      id={1}
      onSuccess={[Function]}
      type="post"
    >
      <Icon
        data-stylename="action-icon"
        name="AddImage"
      />
    </Connect(UploadAttachmentButton)>
    <Connect(UploadAttachmentButton)
      allowMultiple={true}
      attachmentType="file"
      id={1}
      onSuccess={[Function]}
      type="post"
    >
      <Icon
        data-stylename="action-icon"
        name="Paperclip"
      />
    </Connect(UploadAttachmentButton)>
  </div>
  <Button
    color="green"
    data-stylename="postButton"
    dataFor="submit-tt"
    dataTip=""
    disabled={true}
    label="Posting..."
    onClick={[Function]}
  />
  <Tooltip
    delay={150}
    id="submit-tt"
    offset={
      Object {
        "top": 0,
      }
    }
    position="bottom"
  />
</div>
`;

exports[`PostEditor editing a post form in editing mode 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={false}
          key="request"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                request
              </span>
               
              <Icon
                data-stylename="icon icon-request"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={false}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value="valid title"
      />
      <ForwardRef(HyloEditor)
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={false}
        showMenu={true}
      />
    </div>
  </div>
  <LinkPreview
    linkPreview={
      Object {
        "id": "1",
        "title": "a link",
      }
    }
    onClose={[Function]}
    onFeatured={[Function]}
  />
  <Connect(AttachmentManager)
    attachmentType="image"
    id="test"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    id="test"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={
            Array [
              Object {
                "id": "1",
                "name": "test group 1",
              },
              Object {
                "id": "2",
                "name": "test group 2",
              },
            ]
          }
          onChange={[Function]}
          selectedTopics={
            Array [
              Object {
                "name": "design",
              },
            ]
          }
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={false}
          selected={
            Array [
              Object {
                "id": "1",
                "name": "test group 1",
              },
              Object {
                "id": "2",
                "name": "test group 2",
              },
            ]
          }
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Timeframe
      </div>
      <div
        data-stylename="datePickerModule"
      >
        <DatePicker
          onChange={[Function]}
          placeholder="Select Start"
          value={"2019-03-06T21:41:23.315Z"}
        />
        <div
          data-stylename="footerSection-helper"
        >
          To
        </div>
        <DatePicker
          onChange={[Function]}
          placeholder="Select End"
          value={"2019-03-06T21:41:23.315Z"}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <ActionsBar
      canModerate={false}
      groupCount={2}
      groups={
        Array [
          Object {
            "id": "1",
            "name": "test group 1",
          },
          Object {
            "id": "2",
            "name": "test group 2",
          },
        ]
      }
      id="test"
      loading={false}
      save={[Function]}
      setAnnouncement={[MockFunction]}
      submitButtonLabel="Save"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={true}
    />
  </div>
</div>
`;

exports[`PostEditor editing a post post is loaded into fields 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={false}
          key="request"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                request
              </span>
               
              <Icon
                data-stylename="icon icon-request"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={false}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value="valid title"
      />
      <ForwardRef(HyloEditor)
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={false}
        showMenu={true}
      />
    </div>
  </div>
  <LinkPreview
    linkPreview={
      Object {
        "id": "1",
        "title": "a link",
      }
    }
    onClose={[Function]}
    onFeatured={[Function]}
  />
  <Connect(AttachmentManager)
    attachmentType="image"
    id="test"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    id="test"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={
            Array [
              Object {
                "id": "1",
                "name": "test group 1",
              },
              Object {
                "id": "2",
                "name": "test group 2",
              },
            ]
          }
          onChange={[Function]}
          selectedTopics={
            Array [
              Object {
                "name": "design",
              },
            ]
          }
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={false}
          selected={
            Array [
              Object {
                "id": "1",
                "name": "test group 1",
              },
              Object {
                "id": "2",
                "name": "test group 2",
              },
            ]
          }
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Timeframe
      </div>
      <div
        data-stylename="datePickerModule"
      >
        <DatePicker
          onChange={[Function]}
          placeholder="Select Start"
          value={"2019-03-06T21:41:23.315Z"}
        />
        <div
          data-stylename="footerSection-helper"
        >
          To
        </div>
        <DatePicker
          onChange={[Function]}
          placeholder="Select End"
          value={"2019-03-06T21:41:23.315Z"}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <ActionsBar
      canModerate={false}
      groupCount={2}
      groups={
        Array [
          Object {
            "id": "1",
            "name": "test group 1",
          },
          Object {
            "id": "2",
            "name": "test group 2",
          },
        ]
      }
      id="test"
      loading={false}
      save={[Function]}
      setAnnouncement={[MockFunction]}
      submitButtonLabel="Save"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={true}
    />
  </div>
</div>
`;

exports[`PostEditor editing a post saving a post will update a post 1`] = `
Array [
  Array [
    Object {
      "acceptContributions": undefined,
      "details": undefined,
      "donationsLink": null,
      "endTime": "2019-03-06T21:41:23.315Z",
      "eventInviteeIds": undefined,
      "fileUrls": undefined,
      "groups": Array [
        Object {
          "id": "1",
          "name": "test group 1",
        },
        Object {
          "id": "2",
          "name": "test group 2",
        },
      ],
      "id": "test",
      "imageUrls": undefined,
      "isPublic": undefined,
      "linkPreview": Object {
        "id": "1",
        "title": "a link",
      },
      "linkPreviewFeatured": undefined,
      "location": undefined,
      "locationId": "555",
      "memberIds": undefined,
      "projectManagementLink": null,
      "sendAnnouncement": undefined,
      "startTime": "2019-03-06T21:41:23.315Z",
      "timezone": undefined,
      "title": "valid title",
      "topicNames": Array [
        "design",
      ],
      "type": "request",
    },
  ],
]
`;

exports[`PostEditor for a new post correct title placeholder and type button selection for "discussion" type 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={false}
          key="discussion"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                discussion
              </span>
               
              <Icon
                data-stylename="icon icon-discussion"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={false}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value=""
      />
      <ForwardRef(HyloEditor)
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={false}
        showMenu={true}
      />
    </div>
  </div>
  <Connect(AttachmentManager)
    attachmentType="image"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={Array []}
          onChange={[Function]}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={false}
          selected={Array []}
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <ActionsBar
      canModerate={true}
      groupCount={0}
      groups={Array []}
      loading={false}
      save={[Function]}
      submitButtonLabel="Post"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={false}
    />
  </div>
</div>
`;

exports[`PostEditor for a new post correct title placeholder and type button selection for "offer" type 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={false}
          key="offer"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                offer
              </span>
               
              <Icon
                data-stylename="icon icon-offer"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={false}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value=""
      />
      <ForwardRef(HyloEditor)
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={false}
        showMenu={true}
      />
    </div>
  </div>
  <Connect(AttachmentManager)
    attachmentType="image"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={Array []}
          onChange={[Function]}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={false}
          selected={Array []}
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Timeframe
      </div>
      <div
        data-stylename="datePickerModule"
      >
        <DatePicker
          onChange={[Function]}
          placeholder="Select Start"
          value={"2019-03-06T21:41:23.315Z"}
        />
        <div
          data-stylename="footerSection-helper"
        >
          To
        </div>
        <DatePicker
          onChange={[Function]}
          placeholder="Select End"
          value={"2019-03-06T21:41:23.315Z"}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <ActionsBar
      canModerate={true}
      groupCount={0}
      groups={Array []}
      loading={false}
      save={[Function]}
      submitButtonLabel="Post"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={false}
    />
  </div>
</div>
`;

exports[`PostEditor for a new post correct title placeholder and type button selection for "request" type 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={false}
          key="request"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                request
              </span>
               
              <Icon
                data-stylename="icon icon-request"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={false}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value=""
      />
      <ForwardRef(HyloEditor)
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={false}
        showMenu={true}
      />
    </div>
  </div>
  <Connect(AttachmentManager)
    attachmentType="image"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={Array []}
          onChange={[Function]}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={false}
          selected={Array []}
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Timeframe
      </div>
      <div
        data-stylename="datePickerModule"
      >
        <DatePicker
          onChange={[Function]}
          placeholder="Select Start"
          value={"2019-03-06T21:41:23.315Z"}
        />
        <div
          data-stylename="footerSection-helper"
        >
          To
        </div>
        <DatePicker
          onChange={[Function]}
          placeholder="Select End"
          value={"2019-03-06T21:41:23.315Z"}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <ActionsBar
      canModerate={true}
      groupCount={0}
      groups={Array []}
      loading={false}
      save={[Function]}
      submitButtonLabel="Post"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={false}
    />
  </div>
</div>
`;

exports[`PostEditor for a new post correct title placeholder and type button selection for "resource" type 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={false}
          key="resource"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                resource
              </span>
               
              <Icon
                data-stylename="icon icon-resource"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={false}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value=""
      />
      <ForwardRef(HyloEditor)
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={false}
        showMenu={true}
      />
    </div>
  </div>
  <Connect(AttachmentManager)
    attachmentType="image"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={Array []}
          onChange={[Function]}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={false}
          selected={Array []}
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Timeframe
      </div>
      <div
        data-stylename="datePickerModule"
      >
        <DatePicker
          onChange={[Function]}
          placeholder="Select Start"
          value={"2019-03-06T21:41:23.315Z"}
        />
        <div
          data-stylename="footerSection-helper"
        >
          To
        </div>
        <DatePicker
          onChange={[Function]}
          placeholder="Select End"
          value={"2019-03-06T21:41:23.315Z"}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <ActionsBar
      canModerate={true}
      groupCount={0}
      groups={Array []}
      loading={false}
      save={[Function]}
      submitButtonLabel="Post"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={false}
    />
  </div>
</div>
`;

exports[`PostEditor for a new post initial prompt and placeholders 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={false}
          key="discussion"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                discussion
              </span>
               
              <Icon
                data-stylename="icon icon-discussion"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={false}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value=""
      />
      <ForwardRef(HyloEditor)
        contentHTML=""
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={false}
        showMenu={true}
      />
    </div>
  </div>
  <Connect(AttachmentManager)
    attachmentType="image"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={Array []}
          onChange={[Function]}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={false}
          selected={Array []}
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <ActionsBar
      canModerate={true}
      groupCount={0}
      groups={Array []}
      loading={false}
      save={[Function]}
      submitButtonLabel="Post"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={false}
    />
  </div>
</div>
`;

exports[`PostEditor for a new post saving a post will create a new post 1`] = `
Array [
  Array [
    Object {
      "acceptContributions": undefined,
      "details": undefined,
      "donationsLink": null,
      "endTime": "2019-03-06T21:41:23.315Z",
      "eventInviteeIds": undefined,
      "fileUrls": undefined,
      "groups": Array [
        Object {
          "id": "1",
          "name": "test group 1",
        },
        Object {
          "id": "2",
          "name": "test group 2",
        },
      ],
      "id": undefined,
      "imageUrls": undefined,
      "isPublic": undefined,
      "linkPreview": undefined,
      "linkPreviewFeatured": undefined,
      "location": undefined,
      "locationId": "666",
      "memberIds": undefined,
      "projectManagementLink": null,
      "sendAnnouncement": undefined,
      "startTime": "2019-03-06T21:41:23.315Z",
      "timezone": undefined,
      "title": "valid title",
      "topicNames": Array [
        "design",
      ],
      "type": "offer",
    },
  ],
]
`;

exports[`PostEditor post is defaulted while loading editor 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={true}
          key="discussion"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                discussion
              </span>
               
              <Icon
                data-stylename="icon icon-discussion"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={true}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value=""
      />
      <ForwardRef(HyloEditor)
        contentHTML=""
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={true}
        showMenu={true}
      />
    </div>
  </div>
  <Connect(AttachmentManager)
    attachmentType="image"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={Array []}
          onChange={[Function]}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={true}
          selected={Array []}
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <ActionsBar
      canModerate={true}
      groupCount={0}
      groups={Array []}
      loading={true}
      save={[Function]}
      submitButtonLabel="Save"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={true}
    />
  </div>
</div>
`;

exports[`PostEditor post is defaulted while loading editor for NEW post 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={true}
          key="discussion"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                discussion
              </span>
               
              <Icon
                data-stylename="icon icon-discussion"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={true}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value=""
      />
      <ForwardRef(HyloEditor)
        contentHTML=""
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={true}
        showMenu={true}
      />
    </div>
  </div>
  <Connect(AttachmentManager)
    attachmentType="image"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={Array []}
          onChange={[Function]}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={true}
          selected={Array []}
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <ActionsBar
      canModerate={true}
      groupCount={0}
      groups={Array []}
      loading={true}
      save={[Function]}
      submitButtonLabel="Post"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={false}
    />
  </div>
</div>
`;

exports[`PostEditor renders announcement option with admin in props 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={false}
          key="discussion"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                discussion
              </span>
               
              <Icon
                data-stylename="icon icon-discussion"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={false}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value=""
      />
      <ForwardRef(HyloEditor)
        contentHTML=""
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={false}
        showMenu={true}
      />
    </div>
  </div>
  <Connect(AttachmentManager)
    attachmentType="image"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={Array []}
          onChange={[Function]}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={false}
          selected={Array []}
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <ActionsBar
      canModerate={true}
      groupCount={0}
      groups={Array []}
      loading={false}
      save={[Function]}
      submitButtonLabel="Post"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={false}
    />
  </div>
</div>
`;

exports[`PostEditor renders contribution button 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={false}
          key="discussion"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                discussion
              </span>
               
              <Icon
                data-stylename="icon icon-discussion"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={false}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value=""
      />
      <ForwardRef(HyloEditor)
        contentHTML=""
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={false}
        showMenu={true}
      />
    </div>
  </div>
  <Connect(AttachmentManager)
    attachmentType="image"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Project Members
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <Connect(MemberSelector)
          forGroups={Array []}
          initialMembers={Array []}
          onChange={[Function]}
          readOnly={false}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={Array []}
          onChange={[Function]}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={false}
          selected={Array []}
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Accept Contributions
      </div>
      <div
        data-stylename="footerSection-groups accept-contributions"
      >
        <Switch
          data-stylename="accept-contributions-switch"
          onClick={[Function]}
        />
        <div
          data-stylename="accept-contributions-help"
        >
          If you turn 'Accept Contributions' on, people will be able
                      to send money to your Stripe connected account to support
                      this project.
        </div>
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Donation Link
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <input
          data-stylename="textInput"
          disabled={false}
          onChange={[Function]}
          placeholder="Add a donation link (must be valid URL)"
          type="text"
          value=""
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Project Management
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <input
          data-stylename="textInput"
          disabled={false}
          onChange={[Function]}
          placeholder="Add a project management link (must be valid URL)"
          type="text"
          value=""
        />
      </div>
    </div>
    <ActionsBar
      canModerate={true}
      groupCount={0}
      groups={Array []}
      loading={false}
      save={[Function]}
      submitButtonLabel="Post"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={false}
    />
  </div>
</div>
`;

exports[`PostEditor renders with min props 1`] = `
<div
  data-stylename="wrapper"
>
  <div
    data-stylename="header"
  >
    <div
      data-stylename="initial"
    >
      <div>
        <Button
          borderRadius="5px"
          className=""
          color=""
          disabled={false}
          key="discussion"
          label={
            <span
              data-stylename="initial-prompt"
            >
              <span>
                discussion
              </span>
               
              <Icon
                data-stylename="icon icon-discussion"
                name="ArrowDown"
              />
            </span>
          }
          noDefaultStyles={true}
          onClick={[Function]}
        />
      </div>
    </div>
  </div>
  <div
    data-stylename="body"
  >
    <div
      data-stylename="body-column"
    >
      <RoundImage
        data-stylename="titleAvatar"
        medium={true}
      />
    </div>
    <div
      data-stylename="body-column"
    >
      <input
        data-stylename="titleInput"
        disabled={false}
        maxLength={50}
        onChange={[Function]}
        placeholder="Add a title"
        type="text"
        value=""
      />
      <ForwardRef(HyloEditor)
        contentHTML=""
        data-stylename="editor"
        onAddLink={[Function]}
        onAddTopic={[Function]}
        onUpdate={[Function]}
        placeholder="Add a description"
        readOnly={false}
        showMenu={true}
      />
    </div>
  </div>
  <Connect(AttachmentManager)
    attachmentType="image"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <Connect(AttachmentManager)
    attachmentType="file"
    showAddButton={true}
    showLabel={true}
    showLoading={true}
    type="post"
  />
  <div
    data-stylename="footer"
  >
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Topics
      </div>
      <div
        data-stylename="footerSection-topics"
      >
        <Connect(TopicSelector)
          forGroups={Array []}
          onChange={[Function]}
        />
      </div>
    </div>
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label"
      >
        Post in
      </div>
      <div
        data-stylename="footerSection-groups"
      >
        <GroupsSelector
          onChange={[Function]}
          options={Array []}
          readOnly={false}
          selected={Array []}
          t={[Function]}
        />
      </div>
    </div>
    <PublicToggle
      isPublic={false}
      t={[Function]}
      togglePublic={[Function]}
    />
    <div
      data-stylename="footerSection"
    >
      <div
        data-stylename="footerSection-label alignedLabel"
      >
        Location
      </div>
      <Connect(LocationInput)
        onChange={[Function]}
        placeholder="Where is your {{type}} located?"
        saveLocationToDB={true}
      />
    </div>
    <ActionsBar
      canModerate={true}
      groupCount={0}
      groups={Array []}
      loading={false}
      save={[Function]}
      submitButtonLabel="Post"
      t={[Function]}
      toggleAnnouncementModal={[Function]}
      valid={false}
    />
  </div>
</div>
`;

exports[`PostEditor saving a valid post will update a post 1`] = `
Array [
  Array [
    Object {
      "acceptContributions": undefined,
      "details": undefined,
      "donationsLink": null,
      "endTime": "2019-03-06T21:41:23.315Z",
      "eventInviteeIds": undefined,
      "fileUrls": undefined,
      "groups": Array [
        Object {
          "id": "1",
          "name": "test group 1",
        },
        Object {
          "id": "2",
          "name": "test group 2",
        },
      ],
      "id": "test",
      "imageUrls": undefined,
      "isPublic": undefined,
      "linkPreview": Object {
        "id": "1",
        "title": "a link",
      },
      "linkPreviewFeatured": undefined,
      "location": undefined,
      "locationId": "555",
      "memberIds": undefined,
      "projectManagementLink": null,
      "sendAnnouncement": undefined,
      "startTime": "2019-03-06T21:41:23.315Z",
      "timezone": undefined,
      "title": "valid title",
      "topicNames": Array [
        "design",
      ],
      "type": "offer",
    },
  ],
]
`;
