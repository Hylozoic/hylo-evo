// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`doesn't return topics if there is a slug of skipTopics is false 1`] = `
Object {
  "graphql": Object {
    "query": "query ($slug: String, $first: Int, $offset: Int, $sortBy: String, $order: String, $autocomplete: String, $subscribed: Boolean, $updateLastViewed: Boolean) {
      
me {
  id
  name
  avatarUrl
  newNotificationCount
  unseenThreadCount
  location
  email
  settings {
    signupInProgress
  }
  memberships {
    id
    lastViewedAt
    newPostCount
    hasModeratorRole
    community {
      id
      name
      slug
      avatarUrl
      network {
        id
        slug
        name
        avatarUrl
        communities(first: 100) {
          items {
            id
          }
        }
      }
    }
  }
}
      
community(slug: $slug, updateLastViewed: $updateLastViewed) {
  id
  name
  slug
  description
  avatarUrl
  network {
    id
    slug
    name
    avatarUrl
    communities(first: 100) {
      items {
        id
      }
    }
  }
  memberCount
  members(first: 8, sortBy: \\"name\\", order: \\"desc\\") {
    items {
      id
      name
      avatarUrl
    }
  }
  moderators {
    items {
      id
      name
      avatarUrl
    }
  }
  
communityTopics(
  first: $first,
  offset: $offset,
  sortBy: $sortBy,
  order: $order,
  subscribed: $subscribed,
  autocomplete: $autocomplete
) {
  hasMore
  total
  items {
    id
    postsTotal
    followersTotal
    isSubscribed
    newPostCount
    topic {
      id
      name
    }
  }
}

}
    }",
    "variables": Object {
      "first": 200,
      "offset": 0,
      "slug": "anyslug",
      "subscribed": true,
      "updateLastViewed": true,
    },
  },
  "meta": Object {
    "extractModel": Array [
      Object {
        "append": true,
        "getRoot": [Function],
        "modelName": "Me",
      },
      Object {
        "append": true,
        "getRoot": [Function],
        "modelName": "Community",
      },
    ],
  },
  "type": "FETCH_FOR_CURRENT_USER",
}
`;

exports[`doesn't return topics if there is a slug of skipTopics is true 1`] = `
Object {
  "graphql": Object {
    "query": "query ($slug: String, $first: Int, $offset: Int, $sortBy: String, $order: String, $autocomplete: String, $subscribed: Boolean, $updateLastViewed: Boolean) {
      
me {
  id
  name
  avatarUrl
  newNotificationCount
  unseenThreadCount
  location
  email
  settings {
    signupInProgress
  }
  memberships {
    id
    lastViewedAt
    newPostCount
    hasModeratorRole
    community {
      id
      name
      slug
      avatarUrl
      network {
        id
        slug
        name
        avatarUrl
        communities(first: 100) {
          items {
            id
          }
        }
      }
    }
  }
}
      
community(slug: $slug, updateLastViewed: $updateLastViewed) {
  id
  name
  slug
  description
  avatarUrl
  network {
    id
    slug
    name
    avatarUrl
    communities(first: 100) {
      items {
        id
      }
    }
  }
  memberCount
  members(first: 8, sortBy: \\"name\\", order: \\"desc\\") {
    items {
      id
      name
      avatarUrl
    }
  }
  moderators {
    items {
      id
      name
      avatarUrl
    }
  }
  
communityTopics(
  first: $first,
  offset: $offset,
  sortBy: $sortBy,
  order: $order,
  subscribed: $subscribed,
  autocomplete: $autocomplete
) {
  hasMore
  total
  items {
    id
    postsTotal
    followersTotal
    isSubscribed
    newPostCount
    topic {
      id
      name
    }
  }
}

}
    }",
    "variables": Object {
      "first": 200,
      "offset": 0,
      "slug": "anyslug",
      "subscribed": true,
      "updateLastViewed": true,
    },
  },
  "meta": Object {
    "extractModel": Array [
      Object {
        "append": true,
        "getRoot": [Function],
        "modelName": "Me",
      },
      Object {
        "append": true,
        "getRoot": [Function],
        "modelName": "Community",
      },
    ],
  },
  "type": "FETCH_FOR_CURRENT_USER",
}
`;

exports[`returns only current user fetch query when there is not any slug and skipTopics is true 1`] = `
Object {
  "graphql": Object {
    "query": "{
        
me {
  id
  name
  avatarUrl
  newNotificationCount
  unseenThreadCount
  location
  email
  settings {
    signupInProgress
  }
  memberships {
    id
    lastViewedAt
    newPostCount
    hasModeratorRole
    community {
      id
      name
      slug
      avatarUrl
      network {
        id
        slug
        name
        avatarUrl
        communities(first: 100) {
          items {
            id
          }
        }
      }
    }
  }
}
      }",
    "variables": Object {
      "first": 200,
      "offset": 0,
      "slug": null,
      "subscribed": true,
      "updateLastViewed": true,
    },
  },
  "meta": Object {
    "extractModel": Array [
      Object {
        "append": true,
        "getRoot": [Function],
        "modelName": "Me",
      },
      Object {
        "append": true,
        "getRoot": [Function],
        "modelName": "CommunityTopic",
      },
    ],
  },
  "type": "FETCH_FOR_CURRENT_USER",
}
`;
